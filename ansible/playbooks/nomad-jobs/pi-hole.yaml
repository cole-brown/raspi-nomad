# ------------------------------------------------------------------------------
# Nomad Job: Pi-Hole
# ------------------------------------------------------------------------------
#
# NOTE: `run.nomad.pihole` is assumed to be true! Check when calling this.
#
# Example:
#   - name: Nomad Job | Pi-Hole
#     include_tasks: "nomad-jobs/pi-hole.yaml"
#     when: run.nomad.pihole

- name: Nomad Job | Pi-Hole | Run Job
  community.general.nomad_job:
    host: localhost # This is run on the remote host `home_2019_raspi4`, so "localhost" == Ansible host == "the target"?
    content: "{{ lookup('ansible.builtin.file', '{{ path_git_root }}/nomad/jobs/pihole.nomad') }}"
    state: present
    use_ssl: no
  register: nomad_job_pihole

# Wait for it to be running... Can't get into the docker network from the
# Raspberry Pi, so delegate to here.
- name: Nomad Job | Pi-Hole | Check Web UI
  wait_for:
    host: 192.168.50.2
    port: 80
  delegate_to: localhost
  when:
    - nomad_job_pihole.changed

# What is its Docker container called?
- name: Nomad Job | Pi-Hole | Find Docker Container
  # Ansible and Docker both use Jinja2, so... Need to escape the Jinja2
  # double curlies with Jinja2 double curlies so that Ansible doesn't eat
  # the double curlies before Docker gets the double curlies.
  command: docker ps --filter ancestor='pihole/pihole' --format "{{ '{{' }} .Names {{ '}}' }}"
  register: docker_container_pihole
  changed_when: false


# ------------------------------------------------------------------------------
# Whitelisting
# ------------------------------------------------------------------------------

# Save whitelists before & diff after to check for changes.
- name: Nomad Job | Pi-Hole | DNS | Whitelist | Get Domains (Before)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - whitelist
      - --list
  when: docker_container_pihole.stdout
  register: pihole_whitelisted_domains_pre
  changed_when: false

- name: Nomad Job | Pi-Hole | DNS | Whitelist | Get Regexes (Before)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - --white-regex
      - --list
  when: docker_container_pihole.stdout
  register: pihole_whitelisted_regexes_pre
  changed_when: false

# And now we should be able to run commands on the container whose name is
# in `docker_container_pihole.stdout`.
- name: Nomad Job | Pi-Hole | DNS | Whitelist | Set Domains
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    # Use `command` instead of `argv` so that space-separated domain list
    # becomes separate args properly.
    command: "pihole whitelist --noreload {{ whitelist_domains }}"
  with_items: "{{ pihole.whitelist.domains }}"
  loop_control:
    loop_var: whitelist_domains
  when: docker_container_pihole.stdout
  register: pihole_whitelist_domains
  changed_when: false

- name: Nomad Job | Pi-Hole | DNS | Whitelist | Set Regexes
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - --white-regex
      - --noreload
      - "{{ whitelist_regex }}"
  with_items: "{{ pihole.whitelist.regexes }}"
  loop_control:
    loop_var: whitelist_regex
  when: docker_container_pihole.stdout
  register: pihole_whitelist_domains
  changed_when: false

# Save whitelists before & diff after to check for changes.
- name: Nomad Job | Pi-Hole | DNS | Whitelist | Get Domains (After)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - whitelist
      - --list
  when: docker_container_pihole.stdout
  register: pihole_whitelisted_domains_post
  changed_when: false
  # TODO: Does this show all the whitelisted domains? I only see 45, which seems like too few...

- name: Nomad Job | Pi-Hole | DNS | Whitelist | Get Regexes (After)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - --white-regex
      - --list
  when: docker_container_pihole.stdout
  register: pihole_whitelisted_regexes_post
  changed_when: false

# Reload the Pi-Hole DNS Server now that we're done with the changes, if the
# whitelisting actually changed anything...
- name: Nomad Job | Pi-Hole | DNS | Whitelist | Changed?
  set_fact:
    # pihole_whitelist_domains_changed: "{{ pihole_whitelisted_domains_pre != pihole_whitelisted_domains_post }}"
    # pihole_whitelist_regexes_changed: "{{ pihole_whitelisted_regexes_pre != pihole_whitelisted_regexes_post }}"
    pihole_whitelist_changed: "{{ pihole_whitelisted_domains_pre != pihole_whitelisted_domains_post or pihole_whitelisted_regexes_pre != pihole_whitelisted_regexes_post }}"
  when: docker_container_pihole.stdout
  # Try to make this step's status reflect its name?
  changed_when: pihole_whitelist_changed

# ------------------------------------------------------------------------------
# Blacklisting
# ------------------------------------------------------------------------------

# Save blacklists before & diff after to check for changes.
- name: Nomad Job | Pi-Hole | DNS | Blacklist | Get Domains (Before)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - blacklist
      - --list
  when: docker_container_pihole.stdout
  register: pihole_blacklisted_domains_pre
  changed_when: false

- name: Nomad Job | Pi-Hole | DNS | Blacklist | Get Regexes (Before)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - regex
      - --list
  when: docker_container_pihole.stdout
  register: pihole_blacklisted_regexes_pre
  changed_when: false

# And now we should be able to run commands on the container whose name is
# in `docker_container_pihole.stdout`.
- name: Nomad Job | Pi-Hole | DNS | Blacklist | Set Domains
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    # Use `command` instead of `argv` so that space-separated domain list
    # becomes separate args properly.
    command: "pihole blacklist --noreload {{ blacklist_domains }}"
  with_items: "{{ pihole.blacklist.domains }}"
  loop_control:
    loop_var: blacklist_domains
  when: docker_container_pihole.stdout
  register: pihole_blacklist_domains
  changed_when: false

- name: Nomad Job | Pi-Hole | DNS | Blacklist | Set Regexes
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - regex
      - --noreload
      - "{{ blacklist_regex }}"
  with_items: "{{ pihole.blacklist.regexes }}"
  loop_control:
    loop_var: blacklist_regex
  when: docker_container_pihole.stdout
  register: pihole_blacklist_domains
  changed_when: false

# Save blacklists before & diff after to check for changes.
- name: Nomad Job | Pi-Hole | DNS | Blacklist | Get Domains (After)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - blacklist
      - --list
  when: docker_container_pihole.stdout
  register: pihole_blacklisted_domains_post
  changed_when: false

- name: Nomad Job | Pi-Hole | DNS | Blacklist | Get Regexes (After)
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - --black-regex
      - --list
  when: docker_container_pihole.stdout
  register: pihole_blacklisted_regexes_post
  changed_when: false

# Reload the Pi-Hole DNS Server now that we're done with the changes, if the
# blacklisting actually changed anything...
- name: Nomad Job | Pi-Hole | DNS | Changed?
  set_fact:
    # pihole_blacklist_domains_changed: "{{ pihole_blacklisted_domains_pre != pihole_blacklisted_domains_post }}"
    # pihole_blacklist_regexes_changed: "{{ pihole_blacklisted_regexes_pre != pihole_blacklisted_regexes_post }}"
    pihole_blacklist_changed: "{{ pihole_blacklisted_domains_pre != pihole_blacklisted_domains_post or pihole_blacklisted_regexes_pre != pihole_blacklisted_regexes_post }}"
  when: docker_container_pihole.stdout
  # Try to make this step's status reflect its name?
  changed_when: pihole_blacklist_changed


# ------------------------------------------------------------------------------
# Reload DNS?
# ------------------------------------------------------------------------------

- name: Nomad Job | Pi-Hole | DNS | Reload DNS Lists
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - restartdns
      # Reload the DNS lists without flushing the cache or restarting the DNS server.
      - reload-lists
  when: pihole_whitelist_changed or pihole_blacklist_changed


# ------------------------------------------------------------------------------
# Backup
# ------------------------------------------------------------------------------

# To check your machine's DNS Server:
#   ```
#   systemd-resolve --status
#   ```
# But it's difficult to use that in the playbook since it won't immediately
# change...
# - name: Nomad Job | Pi-Hole | Using Pi-Hole for DNS?
#   command:
#     cmd: "systemd-resolve --status | grep 'DNS Server'"

- name: Nomad Job | Pi-Hole | Backup | Make Filenames
  set_fact:
    filename_pihole_backup_iso8601: "pihole-backup.{{ ansible_date_time.iso8601_basic_short }}.tar.gz"
    filename_pihole_backup_date: "pihole-backup.{{ ansible_date_time.date }}.tar.gz"
    path_docker_pihole_backup: "/var/local/pihole/backups"
    path_host_pihole_backup: "{{ ( backup_temp_root.path, 'pihole' ) | path_join }}"
  changed_when: false
  when: run.backup.create

- name: Nomad Job | Pi-Hole | Backup | Ensure '{{ path_host_pihole_backup }}' Exists
  file:
    state: directory
    path: "{{ path_host_pihole_backup }}"
    owner: root
    group: root
    recurse: no
  when: run.backup.create

- name: Nomad Job | Pi-Hole | Backup | Make
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - pihole
      - admin
      - teleporter
      - "{{ path_docker_pihole_backup }}/{{ filename_pihole_backup_iso8601 }}"
  when: run.backup.create

- name: Nomad Job | Pi-Hole | Backup | Copy/Rename
  copy:
    remote_src: true
    src: "{{ path_host_pihole_backup }}/{{ filename_pihole_backup_iso8601 }}"
    dest: "{{ path_host_pihole_backup }}/{{ filename_pihole_backup_date }}"
  when: run.backup.create

- name: Nomad Job | Pi-Hole | Backup | Fetch
  fetch:
    src: "{{ path_host_pihole_backup }}/{{ filename_pihole_backup_date }}"
    # Saves `src` file under "Ansible inventory host name" subdir of `dest`.
    dest: "{{ backup.local.root }}"
  when: run.backup.create

- name: Nomad Job | Pi-Hole | Backup | Clean on Docker
  community.docker.docker_container_exec:
    container: "{{ docker_container_pihole.stdout }}"
    argv:
      - rm
      - "{{ path_docker_pihole_backup }}"
  when: run.backup.clean

- name:  Nomad Job | Pi-Hole | Backup | Clean on Host
  file:
    path: "{{ path_host_pihole_backup }}"
    state: absent
  when: run.backup.clean
